#+TITLE: Learn yourself a lisp
#+DATE: <2023-09-01 Fri>
#+OPTIONS: toc:nil
#+BEGIN_QUOTE
A friend of mine was once interviewing an engineer for a programming job and asked him a typical interview question: how do you know when a function or method is too big? Well, said the candidate, I don't like any method to be bigger than my head. You mean you can't keep all the details in your head? No, I mean I put my head up against my monitor, and the code shouldn't be bigger than my head. ---Peter Seibel, Practical Common Lisp
#+END_QUOTE

[[https://imgs.xkcd.com/comics/lisp_cycles.png]]

The other day I found myself browsing the internet for the quote at the start of this blog. It's a good one, I got a lot of mileage out of it in high school and university, but the exact wording eludes me from time to time. I knew it was from a Lisp textbook, but I'd forgotten which one exactly. Inevitably, I fell down a bit of a rabbit hole and eventually started narrating my endeavours to J. Here's an excerpt of said conversation:

| Me | listen to this goofy definition: "a list is a chain of conses in which the car of each cons is an element of the list, and the cdr of each cons is either the next link in the chain or a terminating atom".[fn:: this is how the List class is defined in http://clhs.lisp.se/Body/t_list.htm] |
| Me | ...                                                                                                      |
| Me | ...now that I've said that out loud, it makes total sense.                                               |
| J  | yeah it does.                                                                                            |
| Me | but it isn't how /Learn Python in 7 Minutes/ would have defined it.                                      |
| J  | ...                                                                                                      |

@@html:<div id="year">@@
Regardless of whether or not I saved myself from sounding like an idiot, my unconscious attitude here has been bothering me for reasons too difficult to explain. But have some advice: go learn yourself a lisp! I've included a list of books I dug up in my expedition down the rabbit hole -- you definitely don't need to read all of them, but most are fun to skim through. 
@@html:</div>@@

And before anyone asks, I'm not a functional purist by any means, +I can barely function on a good day,+ I just think everyone should experience the joys of microdosing on a macro once in a while :)

#+BEGIN_EXPORT html
<script type = "text/javascript">
    function getDate() {
        var dt = new Date();
        y = dt.getYear()+1900;
        var r = document.getElementById('year');
        r.innerHTML = r.innerHTML.replace("{YEAR}",y);
    }
    getDate();
</script>
#+END_EXPORT

#+ATTR_HTML: :class dialogue :border nil :cellspacing nil :cellpadding :frame nil :rules nil

* Resources
- [[https://www.cs.cmu.edu/~dst/LispBook/book.pdf][Common Lisp: A Gentle Introduction to Symbolic Computation]]
- [[https://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/cltl2.html][Common Lisp the Language, 2nd Edition]]
- [[https://gigamonkeys.com/book/][Practical Common Lisp]]
- [[https://web.mit.edu/6.001/6.037/sicp.pdf][Structure and Interpretation of Computer Programs]]
- [[https://lispcookbook.github.io/cl-cookbook/][The Common Lisp Cookbook]]

* Projects
These projects are super cool and good! This list is a bit sad though, so please ping me about your favourite lisp project if you have one. 

- GNU Guix
- StumpWM
- Emacs
- [[https://www.gnu.org/software/mes/][GNU Mes]]
